export const LEVEL_STAGE_POPULAR = {
  title: "ECMAScript Popular Proposals",
  description: "Les propositions les plus demand√©es qui pourraient √™tre int√©gr√©es dans les futures versions d'ECMAScript.",
  specialTiles: [
    {
      id: "observable",
      type: "treasure",
      title: "[Stage 1] Observable",
      description: "Une proposition pour introduire un type natif `Observable` en JavaScript, permettant de g√©rer des flux de donn√©es asynchrones. Cette fonctionnalit√© est largement utilis√©e dans des biblioth√®ques comme RxJS et est au c≈ìur de la programmation r√©active.",
      goals: [
        "Permettre une gestion native des flux de donn√©es asynchrones.",
        "Faciliter l'adoption de la programmation r√©active.",
        "Am√©liorer l'interop√©rabilit√© avec des biblioth√®ques comme RxJS."
      ],
      codes: [
        `const observable = new Observable(observer => {
    observer.next(1);
    observer.next(2);
    observer.complete();
  });
  
  observable.subscribe({
    next: value => console.log(value),
    complete: () => console.log('Done')
  });`
      ]
    },
    {
      id: "pattern-matching",
      type: "treasure",
      title: "[Stage 1] Pattern Matching",
      description: "Une proposition pour introduire le pattern matching en JavaScript, permettant de comparer des structures de donn√©es complexes de mani√®re expressive. Cette fonctionnalit√© est tr√®s attendue pour simplifier la gestion des √©tats dans des frameworks comme React ou Redux.",
      goals: [
        "Permettre une syntaxe plus concise pour la comparaison de structures de donn√©es.",
        "Faciliter la gestion des conditions complexes.",
        "Am√©liorer la lisibilit√© du code."
      ],
      codes: [
        `const result = match(value) {
    case { type: 'success', data } => \`Success: \${data}\`,
    case { type: 'error', message } => \`Error: \${message}\`,
    case _ => 'Unknown'
  };`
      ]
    },
    {
      id: "partial-application",
      type: "treasure",
      title: "[Stage 1] Partial Application",
      description: "Une proposition pour permettre l'application partielle des fonctions, permettant de cr√©er de nouvelles fonctions en fixant certains arguments. Cette fonctionnalit√© est couramment utilis√©e dans des biblioth√®ques comme Lodash ou Ramda pour la composition de fonctions.",
      goals: [
        "Permettre une syntaxe plus concise pour l'application partielle.",
        "Faciliter la cr√©ation de fonctions sp√©cialis√©es.",
        "Am√©liorer la r√©utilisabilit√© du code."
      ],
      codes: [
        `const add = (a, b) => a + b;
  const addFive = add(?, 5);
  console.log(addFive(10)); // 15`
      ]
    },
    {
      id: "do-expressions",
      type: "treasure",
      title: "[Stage 1] do Expressions",
      description: "Une proposition pour introduire des expressions `do`, permettant d'utiliser des blocs de code comme des expressions. Cette fonctionnalit√© est utile pour les d√©veloppeurs travaillant avec des biblioth√®ques fonctionnelles ou des frameworks comme React.",
      goals: [
        "Permettre une syntaxe plus concise pour les blocs de code.",
        "Faciliter l'√©criture de code fonctionnel.",
        "Am√©liorer la lisibilit√© du code."
      ],
      codes: [
        `const result = do {
    const x = 1;
    const y = 2;
    x + y;
  };`
      ]
    },
    {
      id: "decimal",
      type: "treasure",
      title: "[Stage 1] Decimal",
      description: "Une proposition pour introduire un type natif `Decimal` en JavaScript, permettant des calculs d√©cimaux pr√©cis. Cette fonctionnalit√© est essentielle pour les applications financi√®res, scientifiques ou de calcul pr√©cis, et pourrait remplacer des biblioth√®ques comme `decimal.js`.",
      goals: [
        "Permettre des calculs d√©cimaux pr√©cis sans perte de pr√©cision.",
        "Faciliter les applications financi√®res et scientifiques.",
        "Am√©liorer la fiabilit√© des calculs en JavaScript."
      ],
      codes: [
        `const total = Decimal('0.1') + Decimal('0.2');
  console.log(total.toString()); // "0.3"`
      ]
    },
    {
      id: "pipeline-operator",
      type: "treasure",
      title: "[Stage 1] Pipeline Operator",
      description: "Une proposition pour introduire un op√©rateur de pipeline (`|>`), permettant de cha√Æner des op√©rations de mani√®re plus lisible. Cette fonctionnalit√© est tr√®s utile pour les biblioth√®ques comme Lodash ou Ramda, et pour les d√©veloppeurs adoptant un style de programmation fonctionnelle.",
      goals: [
        "Am√©liorer la lisibilit√© des cha√Ænes d'op√©rations.",
        "Permettre une composition plus fluide des fonctions.",
        "Faciliter l'√©criture de code fonctionnel."
      ],
      codes: [
        `const result = value
    |> double
    |> increment
    |> square;`
      ]
    },
    {
      id: "record-and-tuple",
      type: "treasure",
      title: "[Stage 1] Record & Tuple",
      description: "Une proposition pour introduire des types immuables pour les objets et les tableaux, appel√©s Records et Tuples, permettant une meilleure gestion des donn√©es immuables. Cette fonctionnalit√© est particuli√®rement utile pour les frameworks comme React ou Redux, o√π l'immutabilit√© est essentielle.",
      goals: [
        "Fournir des structures de donn√©es immuables par d√©faut.",
        "Faciliter la comparaison profonde et le partage de donn√©es.",
        "Am√©liorer les performances en √©vitant les copies inutiles."
      ],
      codes: [
        `const record = #{ x: 1, y: 2 };
  const tuple = #[1, 2, 3];
  
  console.log(record.x); // 1
  console.log(tuple[0]); // 1`
      ]
    },
    {
      id: "error-stacks",
      type: "treasure",
      title: "[Stage 1] Error Stacks",
      description: "Une proposition pour am√©liorer la gestion des piles d'erreurs en JavaScript, permettant une meilleure tra√ßabilit√© des erreurs. Cette fonctionnalit√© est essentielle pour le d√©bogage dans des applications complexes et asynchrones, et b√©n√©ficierait √† tous les frameworks et biblioth√®ques JavaScript.",
      goals: [
        "Permettre une meilleure tra√ßabilit√© des erreurs.",
        "Faciliter le d√©bogage des applications JavaScript.",
        "Am√©liorer la lisibilit√© des piles d'erreurs."
      ],
      codes: [] // Aucun exemple de code disponible
    },
    {
      id: "ses-secure-ecmascript",
      type: "treasure",
      title: "[Stage 1] SES (Secure EcmaScript)",
      description: "Une proposition pour introduire un environnement d'ex√©cution s√©curis√© en JavaScript, permettant d'ex√©cuter du code non fiable de mani√®re isol√©e. Cette fonctionnalit√© est cruciale pour les applications qui ex√©cutent du code non fiable, comme les extensions de navigateur ou les sandboxes cloud.",
      goals: [
        "Permettre une ex√©cution s√©curis√©e de code non fiable.",
        "Faciliter la cr√©ation de sandboxes JavaScript.",
        "Am√©liorer la s√©curit√© des applications JavaScript."
      ],
      codes: [] // Aucun exemple de code disponible
    },
    {
      id: "type-annotations",
      type: "treasure",
      title: "[Stage 1] Type Annotations",
      description: "Une proposition pour introduire des annotations de type en JavaScript, permettant une meilleure maintenabilit√© et s√©curit√© du code. Cette fonctionnalit√© est tr√®s demand√©e pour am√©liorer la qualit√© du code dans les grands projets et pourrait faciliter l'adoption de TypeScript ou d'autres outils de typage statique.",
      goals: [
        "Permettre une meilleure maintenabilit√© du code gr√¢ce au typage.",
        "Faciliter l'adoption de TypeScript ou d'autres outils de typage.",
        "Am√©liorer la s√©curit√© et la fiabilit√© du code."
      ],
      codes: [
        `function add(a: number, b: number): number {
    return a + b;
  }`
      ]
    },
    {
      id: "cancellation-api",
      type: "treasure",
      title: "[Stage 1] Cancellation API",
      description: "Une proposition pour introduire une API native pour annuler des op√©rations asynchrones, comme des requ√™tes ou des timeouts. Cette fonctionnalit√© est tr√®s utile pour les biblioth√®ques de gestion de requ√™tes comme Axios ou Fetch API, et pour les applications asynchrones complexes.",
      goals: [
        "Permettre une annulation facile des op√©rations asynchrones.",
        "Faciliter la gestion des annulations dans les applications complexes.",
        "Am√©liorer la fiabilit√© des applications asynchrones."
      ],
      codes: [
        `const controller = new CancellationController();
  const signal = controller.signal;
  
  fetch(url, { signal })
    .then(response => response.json())
    .catch(err => {
      if (err.name === 'AbortError') {
        console.log('Request aborted');
      }
    });
  
  controller.abort(); // Annule la requ√™te`
      ]
    },
    {
      id: "string-codepoints",
      type: "treasure",
      title: "[Stage 1] String.prototype.codePoints",
      description: "Une proposition pour ajouter une m√©thode `codePoints` aux cha√Ænes de caract√®res, permettant de manipuler les points de code Unicode. Cette fonctionnalit√© est essentielle pour les applications internationalis√©es et les biblioth√®ques de gestion de texte.",
      goals: [
        "Permettre une manipulation plus facile des points de code Unicode.",
        "Faciliter le traitement des cha√Ænes de caract√®res internationalis√©es.",
        "Am√©liorer la compatibilit√© avec les normes Unicode."
      ],
      codes: [
        `const str = 'üòÉüéâ';
  const codePoints = str.codePoints();
  console.log([...codePoints]); // [128515, 127881]`
      ]
    },
    {
      id: "array-unique",
      type: "treasure",
      title: "[Stage 1] Array.prototype.unique()",
      description: "Une proposition pour ajouter une m√©thode `unique` aux tableaux, permettant de retourner un nouveau tableau avec des √©l√©ments uniques. Cette fonctionnalit√© est souvent impl√©ment√©e manuellement ou via des biblioth√®ques comme Lodash ou Underscore.js.",
      goals: [
        "Permettre une syntaxe plus concise pour obtenir des √©l√©ments uniques.",
        "Faciliter la manipulation des tableaux sans avoir √† utiliser des biblioth√®ques externes.",
        "Am√©liorer la lisibilit√© du code."
      ],
      codes: [
        `const arr = [1, 2, 2, 3, 3, 3];
  const uniqueArr = arr.unique();
  console.log(uniqueArr); // [1, 2, 3]`
      ]
    },
    {
      id: "signals",
      type: "treasure",
      title: "[Stage 1] Signals",
      description: "Une proposition pour introduire un syst√®me de signaux natif en JavaScript, permettant une gestion r√©active des donn√©es. Cette fonctionnalit√© est au c≈ìur des frameworks modernes comme Solid.js ou Preact, et pourrait simplifier la r√©activit√© dans les applications JavaScript.",
      goals: [
        "Permettre une gestion r√©active des donn√©es sans avoir √† utiliser des biblioth√®ques externes.",
        "Faciliter l'adoption de la programmation r√©active dans les frameworks.",
        "Am√©liorer les performances des applications r√©actives."
      ],
      codes: [
        `const count = signal(0);
  effect(() => {
    console.log('Count:', count.value);
  });
  
  count.value = 1; // Affiche 'Count: 1'`
      ]
    },
    {
      id: "concurrency-control",
      type: "treasure",
      title: "[Stage 1] Concurrency Control",
      description: "Une proposition pour am√©liorer la gestion de la concurrence en JavaScript, en particulier pour les applications utilisant des Web Workers ou des op√©rations asynchrones complexes. Cette fonctionnalit√© est essentielle pour les frameworks comme React (avec React Server Components) et les applications multi-thread√©es.",
      goals: [
        "Permettre une meilleure gestion de la concurrence dans les applications modernes.",
        "Faciliter l'utilisation des Web Workers et des op√©rations asynchrones.",
        "Am√©liorer les performances des applications multi-thread√©es."
      ],
      codes: [] // Aucun exemple de code disponible
    }
  ]
};